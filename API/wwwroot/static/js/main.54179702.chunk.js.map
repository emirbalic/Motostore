{"version":3,"sources":["features/catalog/ProductCard.tsx","features/catalog/ProductList.tsx","features/catalog/Catalog.tsx","app/layout/Header.tsx","app/layout/App.tsx","reportWebVitals.ts","index.tsx"],"names":["ProductCard","product","Card","CardHeader","avatar","Avatar","sx","bgcolor","name","charAt","toUpperCase","title","titleTypographyProps","fontWeight","color","CardMedia","height","backgroundSize","image","pictureUrl","CardContent","Typography","gutterBottom","variant","price","toFixed","brand","type","CardActions","Button","size","ProductList","products","Grid","container","spacing","map","item","xs","id","Catalog","useState","setProducts","useEffect","fetch","process","then","response","json","data","Header","darkMode","handleThemeChange","AppBar","position","mb","Toolbar","Switch","checked","onChange","App","setDarkMode","paletteType","theme","createTheme","palette","mode","background","default","ThemeProvider","CssBaseline","Container","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0SAOe,SAASA,EAAT,GAA0C,IAAnBC,EAAkB,EAAlBA,QAClC,OACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CACIC,OACI,cAACC,EAAA,EAAD,CAAQC,GAAI,CAACC,QAAS,kBAAtB,SACKN,EAAQO,KAAKC,OAAO,GAAGC,gBAGhCC,MAAOV,EAAQO,KACfI,qBAAsB,CAClBN,GAAI,CAACO,WAAY,OAAQC,MAAO,mBAGxC,cAACC,EAAA,EAAD,CACIT,GAAI,CAACU,OAAQ,IAAKC,eAAgB,UAAWV,QAAS,iBACtDW,MAAOjB,EAAQkB,WACfR,MAAOV,EAAQO,OAEnB,eAACY,EAAA,EAAD,WACI,eAACC,EAAA,EAAD,CAAYC,cAAY,EAACR,MAAM,YAAYS,QAAQ,KAAnD,eACOtB,EAAQuB,MAAQ,KAAKC,QAAQ,MAEpC,eAACJ,EAAA,EAAD,CAAYE,QAAQ,QAAQT,MAAM,iBAAlC,UACKb,EAAQyB,MADb,MACuBzB,EAAQ0B,WAGnC,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAQC,KAAK,QAAb,yBACA,cAACD,EAAA,EAAD,CAAQC,KAAK,QAAb,wBC5BD,SAASC,EAAT,GAA2C,IAApBC,EAAmB,EAAnBA,SAClC,OACI,cAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,SACKH,EAASI,KAAI,SAAAnC,GAAO,OACjB,cAACgC,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,EAAf,SACI,cAACtC,EAAD,CAAaC,QAASA,KADHA,EAAQsC,SCRhC,SAASC,IACpB,MAAgCC,mBAAoB,IAApD,mBAAOT,EAAP,KAAiBU,EAAjB,KAQA,OANAC,qBAAU,WACNC,MAAMC,iBACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAIP,EAAYO,QAC/B,IAGC,mCACI,cAAClB,EAAD,CAAaC,SAAUA,M,8BCRpB,SAASkB,EAAT,GAAuD,IAAtCC,EAAqC,EAArCA,SAAUC,EAA2B,EAA3BA,kBACtC,OACI,cAACC,EAAA,EAAD,CAAQC,SAAS,SAAShD,GAAI,CAACiD,GAAI,GAAnC,SACI,eAACC,EAAA,EAAD,WACI,cAACnC,EAAA,EAAD,CAAYE,QAAQ,KAApB,sBAGA,cAACkC,EAAA,EAAD,CAAQC,QAASP,EAAUQ,SAAUP,SCkBtCQ,MA3Bf,WACE,MAAgCnB,oBAAS,GAAzC,mBAAOU,EAAP,KAAiBU,EAAjB,KACMC,EAAeX,EAAW,OAAS,QACnCY,EAAQC,YAAY,CACxBC,QAAS,CACPC,KAAMJ,EACNK,WAAY,CACVC,QAAyB,UAAhBN,EAA0B,UAAY,cASrD,OACE,eAACO,EAAA,EAAD,CAAeN,MAAOA,EAAtB,UACE,cAACO,EAAA,EAAD,IACA,cAACpB,EAAD,CAAQC,SAAUA,EAAUC,kBAPhC,WACES,GAAaV,MAOX,cAACoB,EAAA,EAAD,UACE,cAAC/B,EAAD,UCZOgC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqB5B,MAAK,YAAkD,IAA/C6B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.54179702.chunk.js","sourcesContent":["import { Avatar, Button, Card, CardActions, CardContent, CardHeader, CardMedia, Typography } from \"@mui/material\";\nimport { Product } from \"../../app/models/product\";\n\ninterface Props {\n    product: Product\n}\n\nexport default function ProductCard({ product }: Props) {\n    return (\n        <Card>\n            <CardHeader \n                avatar={\n                    <Avatar sx={{bgcolor: 'secondary.dark'}}>\n                        {product.name.charAt(0).toUpperCase()}\n                    </Avatar>\n                }\n                title={product.name}\n                titleTypographyProps={{\n                    sx: {fontWeight: 'bold', color: 'primary.dark'}\n                }}\n            />\n            <CardMedia\n                sx={{height: 140, backgroundSize: 'contain', bgcolor: 'primary.light'}}\n                image={product.pictureUrl}\n                title={product.name}\n            />\n            <CardContent>\n                <Typography gutterBottom color='secondary' variant=\"h5\">\n                    ${(product.price / 100).toFixed(2)}\n                </Typography>\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                    {product.brand} / {product.type}\n                </Typography>\n            </CardContent>\n            <CardActions>\n                <Button size=\"small\">Add to cart</Button>\n                <Button size=\"small\">View</Button>\n            </CardActions>\n        </Card>\n    )\n}","import { Grid } from \"@mui/material\";\nimport { Product } from \"../../app/models/product\";\nimport ProductCard from \"./ProductCard\";\n\ninterface Props {\n    products: Product[];\n}\n\nexport default function ProductList({ products }: Props) {\n    return (\n        <Grid container spacing={6}>\n            {products.map(product => (\n                <Grid item xs={3} key={product.id}>\n                    <ProductCard product={product} />\n                </Grid>\n            ))}\n        </Grid>\n    )\n}","import { useState, useEffect } from \"react\";\nimport { Product } from \"../../app/models/product\";\nimport ProductList from \"./ProductList\";\n\nexport default function Catalog() {\n    const [products, setProducts] = useState<Product[]>([]);\n\n    useEffect(() => {\n        fetch(process.env.REACT_APP_API_URL + 'products')\n            .then(response => response.json())\n            .then(data => setProducts(data))\n    }, [])\n\n    return (\n        <>\n            <ProductList products={products} />\n        </>\n    )\n}","import { AppBar, Switch, Toolbar, Typography } from \"@mui/material\";\n\ninterface Props {\n    darkMode: boolean;\n    handleThemeChange: () => void;\n}\n\nexport default function Header({darkMode, handleThemeChange}: Props) {\n    return (\n        <AppBar position='static' sx={{mb: 4}}>\n            <Toolbar>\n                <Typography variant='h6'>\n                    RE-STORE\n                </Typography>\n                <Switch checked={darkMode} onChange={handleThemeChange} />\n            </Toolbar>\n        </AppBar>\n    )\n}","import { Container, createTheme, CssBaseline, ThemeProvider } from \"@mui/material\";\nimport { useState } from \"react\";\nimport Catalog from \"../../features/catalog/Catalog\";\nimport Header from \"./Header\";\n\nfunction App() {\n  const [darkMode, setDarkMode] = useState(false);\n  const paletteType  = darkMode ? 'dark' : 'light'\n  const theme = createTheme({\n    palette: {\n      mode: paletteType,\n      background: {\n        default: paletteType === 'light' ? '#eaeaea' : '#121212'\n      }\n    }\n  })\n\n  function handleThemeChange() {\n    setDarkMode(!darkMode);\n  }\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <Header darkMode={darkMode} handleThemeChange={handleThemeChange} />\n      <Container>\n        <Catalog />\n      </Container>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './app/layout/styles.css';\nimport App from './app/layout/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}